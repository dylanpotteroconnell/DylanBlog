<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>introductory | Dylan&#39;s Blog</title>
    <link>/tag/introductory/</link>
      <atom:link href="/tag/introductory/index.xml" rel="self" type="application/rss+xml" />
    <description>introductory</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Wed, 27 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>introductory</title>
      <link>/tag/introductory/</link>
    </image>
    
    <item>
      <title>The Perils of Overly Local Optimization</title>
      <link>/post/local-optimization/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/local-optimization/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &amp;#39;rvest&amp;#39;:
##   method            from
##   read_xml.response xml2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ───────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✓ ggplot2 3.2.1     ✓ purrr   0.3.4
## ✓ tibble  2.1.1     ✓ dplyr   0.8.3
## ✓ tidyr   0.8.3     ✓ stringr 1.4.0
## ✓ readr   1.3.1     ✓ forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;purrr&amp;#39; was built under R version 3.6.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ──────────────────────────────── tidyverse_conflicts() ──
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gganimate)
library(transformr)
library(gifski)
### Maybe it&amp;#39;s best to first start one-dimensional, before biting off more 
# than I can chew...


location.params &amp;lt;- c(-10, 0, 10)
scale.params &amp;lt;- c(3.5, 3, 4)
weights &amp;lt;- c(.2, .4, .4)

CauchyMixtureDensity &amp;lt;- function(x,
                                 location.params,
                                 shape.params,
                                 weights) {
  densities &amp;lt;- map2(location.params, 
                    scale.params, 
                    function(.loc, .scale) dcauchy(x,
                                                   location = .loc, 
                                                   scale = .scale)) 
  return(do.call(cbind, densities) %*% weights)
}


DerivCauchy &amp;lt;- function(x, location, scale) {
  2*(location-x)/(scale^3*pi*(1+(-location+x)^2/scale^2)^2)
}

CauchyMixtureDerivative &amp;lt;- function(x,
                                    location.params,
                                    shape.params,
                                    weights) {
  densities &amp;lt;- map2(location.params, 
                    scale.params, 
                    function(.loc, .scale) DerivCauchy(x,
                                                       location = .loc, 
                                                       scale = .scale)) 
  return(do.call(cbind, densities) %*% weights)
}

# Scalar for gradient ascent
x.init &amp;lt;- 18

GradientAscentStep &amp;lt;- function(x, 
                               eta, 
                               location.params, 
                               scale.params, 
                               weights,
                               type = &amp;quot;Gradient Ascent&amp;quot;) {
  deriv &amp;lt;- CauchyMixtureDerivative(x, 
                                   location.params, 
                                   scale.params, 
                                   weights) %&amp;gt;% 
    as.numeric()
  xprime &amp;lt;- x + eta*deriv + ifelse(type == &amp;quot;Noisy Ascent&amp;quot;, 
                                   rnorm(1, 0, .5), 
                                   0)
  return(xprime)
}



RunGradientAscent &amp;lt;- function(x.init, 
                              location.params,
                              scale.params,
                              weights,
                              eta,
                              type = &amp;quot;Gradient&amp;quot;) {
  max.iter &amp;lt;- 10000
  ascent.seq &amp;lt;- c(x.init)
  converged &amp;lt;- FALSE
  i &amp;lt;- 1
  while (! converged &amp;amp;&amp;amp; i &amp;lt; max.iter) {
    ascent.seq[i+1] &amp;lt;- GradientAscentStep(ascent.seq[i],
                                          eta,
                                          location.params,
                                          scale.params,
                                          weights,
                                          type)
    i &amp;lt;- i + 1
    if (abs(ascent.seq[i] - ascent.seq[i-1])*100 &amp;lt; 10^(-4)) {
      converged &amp;lt;- TRUE
    }
  }
  return(ascent.seq)
}




###########
tb.dens.grid &amp;lt;- tibble(x = seq(-20, 20, .1)) %&amp;gt;%
  mutate(y = as.numeric(CauchyMixtureDensity(x, 
                                             location.params, 
                                             scale.params, 
                                             weights)))
eta.grad.ascent &amp;lt;- 100
grad.ascent.seq &amp;lt;- RunGradientAscent(x.init, 
                                     location.params,
                                     scale.params,
                                     weights,
                                     eta = eta.grad.ascent, 
                                     type = &amp;quot;Gradient Ascent&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tb.grad.ascent &amp;lt;- tibble(x = grad.ascent.seq,
                         iter = seq_along(grad.ascent.seq)) %&amp;gt;%
  arrange(iter) %&amp;gt;%
  # mutate(x.next = lead(x, n = 1, default = NA)) %&amp;gt;%
  mutate(y = as.numeric(CauchyMixtureDensity(x, 
                                             location.params, 
                                             scale.params, 
                                             weights)),
         # y.next = as.numeric(CauchyMixtureDensity(x.next, 
         #                                          location.params, 
         #                                          scale.params, 
         #                                          weights)),
         grad = as.numeric(CauchyMixtureDerivative(x, 
                                                   location.params, 
                                                   scale.params, 
                                                   weights)),
         x.next = x + eta.grad.ascent*grad,
         y.next = as.numeric(CauchyMixtureDensity(x.next, 
                                                  location.params, 
                                                  scale.params, 
                                                  weights)))
p.ascent &amp;lt;- ggplot(tb.dens.grid, aes(x = x, y = y)) + 
  geom_line() +
  geom_point(data = tb.grad.ascent, 
             col = &amp;quot;red&amp;quot;, size = 1) +
  geom_segment(data = tb.grad.ascent,
               aes(x = x, y = y, xend = x.next, yend = y.next),
               col = &amp;quot;red&amp;quot;, size = .25,
               arrow = arrow(length = unit(.2, &amp;quot;cm&amp;quot;), type = &amp;quot;closed&amp;quot;))  
p.ascent&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-27-local-optimization.en/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;anim.ascent &amp;lt;- p.ascent + transition_states(iter,
                                            transition_length = 1,
                                            state_length = 1)
animate(anim.ascent, 
        nframes = 10 + max(tb.grad.ascent$iter),
        renderer = gifski_renderer(&amp;quot;test_grad_ascent_anim.gif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-27-local-optimization.en/index_files/figure-html/unnamed-chunk-2-1.gif&#34; /&gt;&lt;!-- --&gt;
&lt;img src=&#34;test_grad_ascent_anim.gif&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eta.noisy.ascent &amp;lt;- 25
noisy.ascent.seq &amp;lt;- RunGradientAscent(x.init, 
                                      location.params,
                                      scale.params,
                                      weights,
                                      eta = eta.noisy.ascent, 
                                      type = &amp;quot;Noisy Ascent&amp;quot;)


tb.noisy.ascent &amp;lt;- tibble(x = noisy.ascent.seq,
                          iter = seq_along(noisy.ascent.seq)) %&amp;gt;%
  arrange(iter) %&amp;gt;%
  # mutate(x.next = lead(x, n = 1, default = NA)) %&amp;gt;%
  mutate(y = as.numeric(CauchyMixtureDensity(x, 
                                             location.params, 
                                             scale.params, 
                                             weights)),
         # y.next = as.numeric(CauchyMixtureDensity(x.next, 
         #                                          location.params, 
         #                                          scale.params, 
         #                                          weights)),
         grad = CauchyMixtureDerivative(x, 
                                        location.params, 
                                        scale.params, 
                                        weights),
         x.next = x + eta.grad.ascent*grad,
         y.next = as.numeric(CauchyMixtureDensity(x.next, 
                                                  location.params, 
                                                  scale.params, 
                                                  weights)))
# For now, only plot until it finds the max
true.max &amp;lt;- max(tb.noisy.ascent$y)
first.time.max &amp;lt;- tb.noisy.ascent %&amp;gt;% 
  filter(y &amp;gt; .99*true.max) %&amp;gt;%
  arrange(iter) %&amp;gt;%
  slice(1) %&amp;gt;%
  pull(iter)
tb.noisy.ascent &amp;lt;- tb.noisy.ascent %&amp;gt;%
  slice(1:first.time.max)




p.noisy &amp;lt;- ggplot(tb.dens.grid, aes(x = x, y = y)) + 
  geom_line() +
  geom_point(data = tb.noisy.ascent, 
             col = &amp;quot;red&amp;quot;, size = 1) +
  geom_segment(data = tb.noisy.ascent,
               aes(x = x, y = y, xend = x.next, yend = y.next),
               # aes(x = x, y = y, xend = x.next, yend = y.next),
               col = &amp;quot;red&amp;quot;, size = .25,
               arrow = arrow(length = unit(.2, &amp;quot;cm&amp;quot;), type = &amp;quot;closed&amp;quot;)) 
p.noisy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-27-local-optimization.en/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;anim.noisy &amp;lt;- p.noisy + transition_states(iter,
                                          transition_length = 1,
                                          state_length = 1)
animate(anim.noisy, 
        nframes = 10 + max(tb.noisy.ascent$iter),
        renderer = gifski_renderer(&amp;quot;test_noisy_ascent_anim.gif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-27-local-optimization.en/index_files/figure-html/unnamed-chunk-3-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;test_noisy_ascent_anim.gif&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Gentle Introduction to Parlays and Independence </title>
      <link>/post/parlays-independence/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      <guid>/post/parlays-independence/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Betting parlays of positively correlated events will generally be profitable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This statement is far from revolutionary, and will be obvious to those familar with the fundamentals of betting. However, I&amp;rsquo;ve talked to many folks with no prior experience who wanted to learn more. I thought it would be interesting and fun to write up a basic tutorial in this concept which assumes minimal background in probability (and should provide good intuition even with no mathematical foundation). This post is intended as an exercise in explaining concepts at an introductory level, and should be ignored by those who are already comfortable with the tools of probability (although many might find the 2018 election parlay opportunities of interest).&lt;/p&gt;
&lt;h1 id=&#34;betting&#34;&gt;Betting&lt;/h1&gt;
&lt;p&gt;Most people are familiar with the concept of a bet. I might flip a coin, and the loser pays the winner a dollar, which feels like a fair deal. Implicit in our evaluation of this bet as &amp;ldquo;fair&amp;rdquo; is the concept of Expected Value (EV). While this will avoid the mathematical definition whenever possible, we tend to have an intuitive sense of EV when we confront it in our daily lives. The fact that the coin flipping game is &amp;ldquo;fair&amp;rdquo; is obvious due to its symmetry. But if I instead offered to roll a die, and said that on a one through four you pay me a dollar, and on a five or six I pay you two dollars, many people would intuitively see this bet as fair as well. I have twice the chance to win, but have to pay out twice as much. Mathematically, we simply find the sum of all the outcomes multiplied by their probability of occurrence. I have \(2/3\) chance to pay you a dollar, and \(1/3\) chance to win two dollars, and \(-1*\frac{2}{3} + 2*\frac{1}{3} = 0\).&lt;/p&gt;
&lt;p&gt;When it comes to betting, it&amp;rsquo;s worth noting that Expected Value is the &lt;em&gt;only&lt;/em&gt; viable way to consider the outcome, and any other metric is bound to be a losing strategy in the long run. That doesn&amp;rsquo;t mean it applies in every practical situation. If I offered you a deal where I would double your life&amp;rsquo;s savings with a 55% chance, and you would lose it all with 45% chance, this is clearly a positive expected value bet, and it is also one that you should demonstrably &lt;em&gt;never&lt;/em&gt; take. The marginal utility of money states that the value of doubling your life savings does not equate to the loss from losing your life&amp;rsquo;s savings. This is a reminder that betting is particularly problematic in any situation where the stakes are not so low that you can focus solely on EV. If someone offered you the same deal on each of your individual dollars in your life savings independently, then it would be a consistently profitable proposition with essentially no downside, due to the law of large numbers. (And if one&amp;rsquo;s life savings is not suitably large so that the law of large numbers applies, betting should be far from your mind). This is not the purpose of this summary, but for anyone who does plan to place bets, it is essential that they give some preliminary consideration to the marginal utility of money, bankroll management, and the law of large numbers.&lt;/p&gt;
&lt;h1 id=&#34;betting-notation&#34;&gt;Betting Notation&lt;/h1&gt;
&lt;p&gt;In America, bets are usually denoted using the Moneyline system, where odds are reported in the form of \(\pm X-[\)hundred]. A +\(200\) line says that if you bet \$100 and win, you receive back \$200 plus your original bet. A \(-250\) line says that if you bet \$250 and win, you win \$100 (and of course also win back your original bet). This system makes it intuitive to measure your payout on a specific bet, but it is somewhat opaque when newer bettors try and understand the corresponding probabilities associated with each bet. We can work in terms of &amp;ldquo;Implied Odds&amp;rdquo;, which are simply the corresponding percentage chance that you would need to win for the bet to be breakeven in expected value. A +200 Moneyline has corresponding Implied Odds of 33.3%. Abroad, odds are frequently reported in fractional terms, a +200 Moneyline corresponds to 2/1 (&amp;ldquo;two to one&amp;rdquo;) odds. We note that Moneyline odds will be in the form of plus or minus at least \(100\). American sports will also report bettling lines such as the New England Patriots being \(-7.5\) for their game. This is a &lt;em&gt;point spread&lt;/em&gt;, where there is even money to be made betting whether the Patriots will score at least \(7.5\) more points than their opponent. I personally find it nearly impossible to quickly understand Moneyline odds in terms of probabilities, so I built a light 
&lt;a href=&#34;https://chrome.google.com/webstore/detail/odds-converter/klechkhopfnjihobbcfeheooaigjjgdg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome extension&lt;/a&gt; that can quickly perform these conversions on the fly.&lt;/p&gt;
&lt;h1 id=&#34;parlays&#34;&gt;Parlays&lt;/h1&gt;
&lt;p&gt;Standard bets offer a payout based on a binary result. You might bet that the Golden State Warriors win the NBA title (&amp;ldquo;NBA Futures&amp;rdquo;), or that the Eagles score at least six more points than the Raiders in their upcoming game (&amp;ldquo;beating the spread&amp;rdquo;). A bettor who has fallen on hard times might have little to do for the whole weekend but watch sports, and could place separate bets that Alabama beats Oklahoma and that Clemson beats Notre Dame in the College Football Playoff. However, they could also &amp;ldquo;parlay&amp;rdquo; events, in which they &lt;em&gt;only&lt;/em&gt; get paid out if &lt;em&gt;both&lt;/em&gt; those events occur (if Clemson beats ND but Alabama loses, then they would receive nothing). This seems like a scam, but the allure is that under a parlay the payoffs are multiplicative, and much more lucrative than simply the sum of those individual payouts. This is alluring to many bettors because it promises large paydays. In the above example, Alabama and Clemson were both large favorites, at -555 and -440 respectively (i.e. you have to place a bet of \$555 or \$440 to win a prize of \$100 if you are correct). Parlays are appealing to bettors because we have poor intuition for the likelihood of a number of independent (explained below) very likely events &lt;em&gt;all&lt;/em&gt; occurring. This fallacy is ubiquitous. In college football, when halfway through the season, a dozen contenders are 6-0, analysts and fans tend to look at their upcoming schedule, see that they are favored in each of those six games, and tend to muse about the situation in which each of those individually likely events occurs. In politics, readers are perplexed when analysts predict that of some 100 house races that lean solidly to one side, there will very likely be &lt;em&gt;some&lt;/em&gt; number of shocking upsets, even if we don&amp;rsquo;t know which one. Our mind works by considering individual events. If I can&amp;rsquo;t tell you &lt;em&gt;which&lt;/em&gt; remaining football game your team is likely to lose, you may be accustomed to think that the most likely result is that you don&amp;rsquo;t lose a single one, even when that is an unlikely event (as shown by the fact that even the top contenders tend to lose a game by the end of the college football season).&lt;/p&gt;
&lt;p&gt;On the other hand, parlays are appealing to bookies because they encourage more betting, and bookies profit from the volume of bets placed. There is no &lt;em&gt;catch&lt;/em&gt; here, and the bookies give a fair price on a parlay. Instead of the Clemson &amp;amp; Alabama example, we consider one where the probabilities are intuitive, with an extremely boring bookie that allows you to bet on the results of die rolls with no rake (which is the tax they take as profit on any bet placed). In each case, you bet \$1. For Bet A, they toss two dice, and you win \$12 (including your bet) when they sum to at least 11. For Bet B, they toss a single die, and you win \$6 (including your bet) if they roll a six. Both these bets have an expected value of 0. For Bet A, this has a 1 in 12 chance of occuring, so if you have placed a \$1 bet, you have a 1 in 12 chance of winning \$12, which is fair (and the same for Bet B with a 1 in 6 chance).&lt;/p&gt;
&lt;p&gt;If you wanted to up the stakes and instead ask for a parlay on these events, you could significantly increase your possible payout. Bookies are perfectly fair when it comes to parlays. They set their own lines, and choose how much &amp;ldquo;rake&amp;rdquo; to take from the bets, but when it comes to parlays, bookies follow a simple formula which preserves the expected value of the payouts. They simply consider it the same as a single bet on the event where both happen, with that probability computed by multiplying the individual probabilities together. In the case above, a parlay of Bet A and Bet B would yield a whopping \$72 payout when it hits. This calculation is predicated on the idea that the probability that both A and B occur is the product of their individual probabilities, so \(1/6 * 1/12 = 1/72\). If we use the mathematical shorthand \(P(A)\) to denote &amp;ldquo;Probability of Bet A succeeding&amp;rdquo;, and \(P(A,B)\) for &amp;ldquo;probability of both Bet A and Bet B succeeding&amp;rdquo;, we write this as \(P(A)*P(B)=P(A,B)\). Those familiar with probability will note that this formula holds for any two events which are &lt;em&gt;independent&lt;/em&gt;, that is, where information about the result of one event tells us nothing about the result of the other.&lt;/p&gt;
&lt;p&gt;Independence is a mathematically defined concept, but we have an intuition for its meaning. If I ask you to guess the probability that a baby is born on a white Christmas (that is, on a December 25th where it snows), you would be foolish to take the probability that the baby is born on December 25th, and multiply it by the probability that it is snowing on any given day. It is significantly more likely that it snows on December 25th than the average day because it is in the middle of winter. The proper calculation would be to find the product of the probabilities that it is December 25th, and that it is snowing on any given December 25th (a conditional probability, whose  definition we sidestep here). Luckily, in the case of our dice rolling bookie, independence is pretty irrefutable. Assuming that the dice are fair and properly weighted, the results of the first pair of rolls have no effect on the outcome of some later rolls.&lt;/p&gt;
&lt;h1 id=&#34;parlays-of-dependent-events&#34;&gt;Parlays of Dependent Events&lt;/h1&gt;
&lt;p&gt;This prompts the question, how do parlays work when the events are not independent? The short answer is that bookies generally do not offer parlays on dependent events, and that parlaying events that are positively correlated (i.e. the chance of one occurring makes it more likely that the other occurs) is profitable for the bettor. Luckily, most bets offered by the bookie tend to be independent. The scores of football games on a given Sunday seem to have little relation to one another. The most common bets to show dependence in fact show a &lt;em&gt;negative&lt;/em&gt; correlation, when only one can occur. A parlay on NBA futures where both the Golden State Warriors and the Cleveland Cavaliers win the NBA title is clearly nonsensical (the fact that the probability of both occurring is 0 is a form of dependence).&lt;/p&gt;
&lt;p&gt;What happens if a bookie allows betting on positively correlated events? This is best demonstrated by example. We consider Bet A and Bet B again, but with a twist. Bet A remains the same, but now define Bet B to be whether the first die rolled &lt;em&gt;of those used for Bet A&lt;/em&gt; is a six (rather than rolling a new die. Clearly, the individual probabilities are the same. However, these events are no longer independent. Intuitively, the success of Bet B (so the first roll is a 6) greatly increases the chance that Bet A succeeds (although it does not guarantee it). More precisely, the probability that both Bet A and Bet B occur is simply 1/18, as there are two possible rolls that are valid ([6,5] and [6,6]). However, \(1/18 &amp;gt; 1/72 = 1/6*1/12\). Thus, if the bookie provided an \$18 payout on this parlay, it would be break even for the bettor. If they provided the $72 pay out prescribed by the standard parlay formula, a bettor would print money in the long run.&lt;/p&gt;
&lt;p&gt;Correlated events still have a &amp;ldquo;correct&amp;rdquo; and fair price (in the example above, it was the substantially reduced price of $18). However, this computation required knowledge of their exact correlation. This is straightforward when it comes to the rolling of two dice, but difficult when it comes to the complex real world bets that bookies profit from. We can intuitively guess that the Super Bowl prop bet &amp;ldquo;Tom Brady throws for two or more touchdowns&amp;rdquo; is likely correlated with the bet &amp;ldquo;The Patriots (his team) win the Super Bowl&amp;rdquo;. In the world where we know Brady had a prolific scoring night, his team&amp;rsquo;s chances of winning are much higher (having essentially &amp;ldquo;removed&amp;rdquo; all of the worlds in which the Patriots offense was shut out, many of which were losing scenarios). But it is very difficult to estimate precisely how correlated those events are.&lt;/p&gt;
&lt;p&gt;Bookies prefer the simple solution: they do not offer correlated parlays. You can bet separately on these events, but they offer a singular pricing formula for parlays. Either the events are independent (in which case the probabilities are multicative, and they use their standard pricing formula), or they do not offer the parlay. In the world of sports, the divide between dependence and independence is usually fairly clear. Events in separate games on the same day should be independent. Events &lt;em&gt;within the same game&lt;/em&gt; tend not to be. There are correlations between a wide variety of events within the same game, even if it isn&amp;rsquo;t as obvious as &amp;ldquo;touchdowns scored&amp;rdquo; and &amp;ldquo;final result&amp;rdquo;. If a basketball team has twin stars, there will tend to be a slight negative correlation between their points scored, because there are a limited number of possessions and each shot taken by one player is a shot the other does not take. There are of course mitigating factors: a high scoring night for one player might indicate that the opposing defense is poor, or the two stars might both pass less to their supporting cast on nights when those role players are shooting poorly. But neither effect tends to outweigh the simple fact that there are a limited number of shots in the game. Bookies feel no obligation to attempt to set the correct price on these myriad combinations, and instead allow for parlays solely in the case of obviously plausible independence.&lt;/p&gt;
&lt;h1 id=&#34;parlays-in-political-elections&#34;&gt;Parlays in Political Elections&lt;/h1&gt;
&lt;p&gt;In practice, the statement &amp;ldquo;bookies do not allow for correlated parlays&amp;rdquo; is a sweeping generalization. Bookies make mistakes, and the &amp;ldquo;rake&amp;rdquo; that they take allows for a reasonable margin of error. It is better practice for them to consistently offer bets that attract bettors, than worry about the singular case in which they make a small mistake and suffer a loss. Bookies limit the amount that can be wagered at any given time, so even when they set an inaccurate line, they are not fleeced by sharp gamblers with deep pockets. It is always worth keeping an eye out for situations where bookies might slip up and offer such a profitable parlay.&lt;/p&gt;
&lt;p&gt;One such example came in the form of the 2018 midterm elections. Bookies offered bets on the results of individual races, general trends (&amp;ldquo;How many seats do Republicans gain in the Senate?&amp;quot;), and more. Some correlations are powerful and obvious. The result that Josh Hawley (Missouri), Dean Heller (Nevada), and Mike Braun (Indiana) win their Senate races is highly correlated with the GOP retaining control of the Senate. If they win those three close races, the odds that they somehow lose enough much more safe Senate seats for the Democrats to flip control is next to 0. I did not see any bookie foolish enough to allow parlays on these events. Generally, bookies are acutely aware that vertical structures like this (where one result is an aggregate of many individual results) have clear positive correlation.&lt;/p&gt;
&lt;p&gt;However, there was at least one bookie that allowed for parlays of &lt;em&gt;individual&lt;/em&gt; Senate races. For bookies accustomed to sports, this might seem sensible, as it is superficially similar to parlaying simultaneous game results. However, separate senate races can show obvious and consistent correlation. Some may dislike the language of this claim, as philisophically, it depends on your probabilistic interpretatin of a political race. It&amp;rsquo;s hard to see the connection between the senate choice of individual voters in Arizona and Nevada. However, under that framework, it&amp;rsquo;s hard to see how random chance enters the equation at all (voters are not flipping a coin at the ballot box, by and large). This ties into a deeper issue of how we interpret probabilistic forecasts, but my short answer would be that we use probability describe level of uncertainty about complex phenomena.&lt;/p&gt;
&lt;p&gt;Polling is the base staple of an election prediction. Even in the fantastical world where polls represent a perfectly random sampling of the entire voting population, there is the uncertainty that stems from the inherent randomness of such a random sample (luckily, this form of uncertainty is easy to mathematically model, and disappears as our sample gets very large). Then there is the uncertainty comes from the practical realities of imperfect polling, which crudely violates the simple assumptions taught in an introductory probability class (consider the work 538 does to grade pollsters as part of this uncertainty). And the final nebulous level of uncertainty comes from translating the results of the poll (which studies on a specific date who people say they plan to vote for) to the results of the election itself (determined by the choice of people who actually place a vote). These are two separate questions, and even if a poll precisely answers its own question, the translation of that to answer the second question can be clouded by the uncertainty of news that breaks after the poll is conducted, or voters who think it over some more and get cold feet, or a storm which prevents those without a car from making their way to the polling station, or any number of ways that these questions can differ. Election models have to grapple with these layers of uncertainty, and as a result a site like 538 reports that Ted Cruz has a &amp;ldquo;7 in 9&amp;rdquo; chance to beat Beto O&amp;rsquo;Rourke, and not complete certainty.&lt;/p&gt;
&lt;p&gt;The claim that election results are correlated fits neatly into this framework. It&amp;rsquo;s hard to define the connection between the individual decisions of voters in two states about two different pairs of candidates. But it&amp;rsquo;s easy to see how the errors in the probabilitic forecast would be connected. This is particularly true in the heavily partisan landscape of our current political system. The senate races in Nevada and Arizona aren&amp;rsquo;t entirely separate. In each of these demographically similar states, the populace is choosing between a democrat and a republican. Thus, certain forecasting errors made in one state tend to be mirrored in the other. The mistakes that pollsers make which could underestimate latino turnout will cause a similar divergence from the election forecasts and the final result in the two states.&lt;/p&gt;
&lt;p&gt;This implies that even in a world where the election outcomes are random according to the exact probabilities prescribed by the betting markets, a parlay offers a chance for profit. The positive correlation of these two results simply needs to outweigh the cost of the rake on these bets for these bets to have a positive expected value.&lt;/p&gt;
&lt;p&gt;We can illustrate this with the example of the bets I placed on the 2018 midterms. A significantly more complex and involved strategy could be used to profit from this parlaying opportunity, but this was just a fun example of the concept in practice.&lt;/p&gt;
&lt;h1 id=&#34;post-incomplete&#34;&gt;POST INCOMPLETE&lt;/h1&gt;
&lt;p&gt;To be continued&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scraping the &#34;Intelligence Squared&#34; Debate Results</title>
      <link>/post/scraping-is2/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      <guid>/post/scraping-is2/</guid>
      <description>&lt;p&gt;This is a brief companion to the 
&lt;a href=&#34;https://dylanpotteroconnell.github.io/debatefinalsummary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt; analyzing the methods of assigning a winner to a debate, using the Intelligence Squared dataset. I will briefly outline here how I assemble that dataset, for trasparency.&lt;/p&gt;
&lt;h3 id=&#34;compiling-the-pages&#34;&gt;Compiling the Pages&lt;/h3&gt;
&lt;p&gt;The results from each Intelligence Squared debate are posted online in pages such as 
&lt;a href=&#34;https://www.intelligencesquaredus.org/debates/globalization-has-undermined-americas-working-class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;, including video of the debate, a description of the major positions of each side, the qualifications of the debaters, and most importantly, the results of the audience polling. Unfortunately, there doesn’t seem to be a central hub page that neatly lists all the URLs. However, the desired dataset isn’t huge (about 90 total debates), so there’s no substitute for the occasional work simply manually trawling through the website, and recording the date, name, and URL of each debate in question.&lt;/p&gt;
&lt;h3 id=&#34;scraping-the-numbers&#34;&gt;Scraping the numbers&lt;/h3&gt;
&lt;p&gt;Once we have a full list of all the relevant URLs, luckily, the results themselves are generally presented in a consistent format. Thus,  some simple work with regular expressions gathers the data that we need. One such example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;debate_vote_results={&amp;quot;live&amp;quot;:{&amp;quot;pre&amp;quot;:{&amp;quot;f&amp;quot;:36,&amp;quot;a&amp;quot;:45,&amp;quot;u&amp;quot;:19,&amp;quot;w&amp;quot;:&amp;quot;a&amp;quot;},&amp;quot;post&amp;quot;:{&amp;quot;f&amp;quot;:32,&amp;quot;a&amp;quot;:61,&amp;quot;u&amp;quot;:7,&amp;quot;w&amp;quot;:&amp;quot;a&amp;quot;},&amp;quot;s&amp;quot;:41,&amp;quot;t&amp;quot;:100,&amp;quot;f&amp;quot;:{&amp;quot;f&amp;quot;:18,&amp;quot;a&amp;quot;:15,&amp;quot;u&amp;quot;:3},&amp;quot;a&amp;quot;:{&amp;quot;f&amp;quot;:6,&amp;quot;a&amp;quot;:38,&amp;quot;u&amp;quot;:1},&amp;quot;u&amp;quot;:{&amp;quot;f&amp;quot;:8,&amp;quot;a&amp;quot;:8,&amp;quot;u&amp;quot;:3}},&amp;quot;online&amp;quot;:{&amp;quot;t&amp;quot;:100,&amp;quot;pre&amp;quot;:{&amp;quot;f&amp;quot;:50,&amp;quot;a&amp;quot;:35,&amp;quot;u&amp;quot;:15,&amp;quot;w&amp;quot;:&amp;quot;&amp;quot;},&amp;quot;post&amp;quot;:{&amp;quot;f&amp;quot;:44,&amp;quot;a&amp;quot;:50,&amp;quot;u&amp;quot;:6,&amp;quot;w&amp;quot;:&amp;quot;&amp;quot;},&amp;quot;f&amp;quot;:{&amp;quot;f&amp;quot;:35,&amp;quot;a&amp;quot;:13,&amp;quot;u&amp;quot;:2},&amp;quot;a&amp;quot;:{&amp;quot;f&amp;quot;:4,&amp;quot;a&amp;quot;:27,&amp;quot;u&amp;quot;:4},&amp;quot;u&amp;quot;:{&amp;quot;f&amp;quot;:6,&amp;quot;a&amp;quot;:10,&amp;quot;u&amp;quot;:0}}};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In case anyone wants to borrow this sort of simple scrape for their own projects, you can find the code 
&lt;a href=&#34;https://github.com/dylanpotteroconnell/IntelSquaredProject/blob/master/intelsquareddata.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, although the approach is extremely messy. Luckily, with R it’s more important to be fast than it is to be clean, and you can use very awkward code as long as you find it readable and clear. Regular expressions like this can grab the relevant numbers that we need, and we store it in one large data frame.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;gsub(&amp;quot;.*\&amp;quot;f\&amp;quot;:\\{\&amp;quot;f\&amp;quot;:(\\d+\\.*\\d*),\&amp;quot;a\&amp;quot;:(\\d+\\.*\\d*),\&amp;quot;u\&amp;quot;:(\\d+\\.*\\d*).*&amp;quot;, &amp;quot;\\1 \\2 \\3&amp;quot;, post)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where we identify the numbers that we’re interested in. With the numbers compiled into one large data frame (which can be viewed in raw form 
&lt;a href=&#34;https://github.com/dylanpotteroconnell/IntelSquaredProject/blob/master/votingresultsfinal.csv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, for those interested in examining the data themselves). In total, there are 88 debates stretching back to 2012 which have all the information needed. The program itself stretches back further, but they only began tracking the subgroup movements more recently.&lt;/p&gt;
&lt;p&gt;In the next post, we can actually dive into the data itself.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
