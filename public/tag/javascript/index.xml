<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript | Dylan&#39;s Blog</title>
    <link>https://dylanpotteroconnell.netlify.app/tag/javascript/</link>
      <atom:link href="https://dylanpotteroconnell.netlify.app/tag/javascript/index.xml" rel="self" type="application/rss+xml" />
    <description>javascript</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 01 Mar 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dylanpotteroconnell.netlify.app/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>javascript</title>
      <link>https://dylanpotteroconnell.netlify.app/tag/javascript/</link>
    </image>
    
    <item>
      <title>OddsConverter Part 3: Uploading to the Chrome Store</title>
      <link>https://dylanpotteroconnell.netlify.app/2018/03/01/oddsconverter-part3/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/03/01/oddsconverter-part3/</guid>
      <description>&lt;p&gt;Brief update to the 
&lt;a href=&#34;https://dylanpotteroconnell.github.io/bettingextension2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;past post&lt;/a&gt;. I knew a few people who wanted to try the extension, so I thought it’d be a fun exercise to go through the process of uploading it to the Chrome store. You can view and add the extension to your own browser 
&lt;a href=&#34;https://chrome.google.com/webstore/detail/odds-converter/klechkhopfnjihobbcfeheooaigjjgdg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This is far from a polished state, given that it was meant to be a quick way to explore something new. However, I do find myself using the finished product a surprising amount, so I thought it was worth keeping on the Webstore. And it’s nice to see how easy Google makes it to upload a simple app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Odds Converter Part 2: Conversion Webpage</title>
      <link>https://dylanpotteroconnell.netlify.app/2018/01/25/oddsconverter-part2/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/01/25/oddsconverter-part2/</guid>
      <description>&lt;h2 id=&#34;opening-a-new-page&#34;&gt;Opening a New Page&lt;/h2&gt;
&lt;p&gt;Our simple extension from 
&lt;a href=&#34;https://dylanpotteroconnell.github.io/bettingextension/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;last time&lt;/a&gt; works quite well to replace text on a page, but whenever text isn&amp;rsquo;t displayed in a nice format (which is true for many mdoern websites), it won&amp;rsquo;t do much good. The hope is to add functionality to it so that the user can easily and manually input the odds that they need. My vision was to let the user right click, and open up a page that lets them impute the odds to convert in a more detailed format.&lt;/p&gt;
&lt;p&gt;As before, I don&amp;rsquo;t know enough about Javascript to start from scratch, so I borrow and adapt from some others online. 
&lt;a href=&#34;https://stackoverflow.com/questions/4376167/text-selection-and-display-in-context-menu-chrome-extension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This StackOverflow answer&lt;/a&gt; provides an example of creating a context menu upon a user right click that is the right structure. Importantly, this also provides a framework for storing any selected text that the user right clicks. The end goal is to let them auto populate our odds converter page, so we leave in that functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;\\ rightClick.js
var selection_callbacks = [];
function getSelection(callback) {
 selection_callbacks.push(callback);
    chrome.tabs.executeScript(null, { file:&amp;quot;selection.js&amp;quot; });
  };
  chrome.extension.onRequest.addListener(function (request) {
    var callback = selection_callbacks.shift();
    callback(request);
  });

function openConverter(selectedText) {
  var serviceCall = &#39;converter.html&#39;
  chrome.tabs.create({ url: serviceCall });
}
var tx = getSelection();
var title = &amp;quot;Convert: &#39;&amp;quot; + tx + &amp;quot;&#39; title&amp;quot;;
var id = chrome.contextMenus.create({
    title: &amp;quot;Convert Odds?&amp;quot;,
    contexts:[&amp;quot;selection&amp;quot;],
    onclick: function(info, tab) {
        openConverter(info.selectionText);
    }
});
console.log(&amp;quot;selection item:&amp;quot; + id);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;\\ selection.js
chrome.extension.sendResponse(convert(window.getSelection().toString()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty rote, with small changes from the linked work (and final code 
&lt;a href=&#34;https://github.com/dylanpotteroconnell/oddsextension/blob/master/replaceScript.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). Initially, I hoped to perform some calculations with the selected text, and then display the result in the context menu itself. After some trial and error, it seems that this is quite a bit more complicated than it would seem. While you can reference the text in the selection using &amp;ldquo;%s&amp;rdquo;, the issue is that this is passed through our function as the literal string &amp;ldquo;%s&amp;rdquo;, and not the selection itself, until it is displayed (at which point it is replaced by tthe selection). This means we can&amp;rsquo;t easily perform a calculation with it. The underlying challenge is that Chrome wants to display the text on the context menu immediately, so we would need to manually program in a structure that lets it wait for us to convert the text. For now, we instead focusing on simply opening the useful HTML page &amp;ldquo;oddsconverter.html&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;odds-converter-html-page&#34;&gt;Odds Converter HTML Page&lt;/h2&gt;
&lt;p&gt;We want an HTML page that neatly converts between each sort of odds. For a rough idea of the base template, we borrow 
&lt;a href=&#34;https://www.daniweb.com/programming/web-development/threads/468068/auto-calculate-two-textfields&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; guide. While their goal is quite unrelated, this form has the neat feature where it calculates its result after &lt;em&gt;each&lt;/em&gt; keystroke. I want this extension to be light and nimble, so I like the idea of it constantly updating based on new input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;!-- https://www.daniweb.com/programming/web-development/threads/468068/auto-calculate-two-textfields --&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=&amp;quot;converter.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;form name=&amp;quot;convert&amp;quot; action=&amp;quot;&amp;quot; id=&amp;quot;convert&amp;quot; &amp;gt;
    &amp;lt;span id=&amp;quot;update&amp;quot;&amp;gt;Odds Converter&amp;lt;/span&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ml&amp;quot; name=&amp;quot;ml&amp;quot; onkeyup=&amp;quot;convML(this)&amp;quot;/&amp;gt; Money Line &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;frac&amp;quot; name=&amp;quot;frac&amp;quot; onkeyup=&amp;quot;convFrac(this)&amp;quot;/&amp;gt; Fractional Odds &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ip&amp;quot; name=&amp;quot;ip&amp;quot; onkeyup=&amp;quot;convIP(this)&amp;quot;/&amp;gt; Implied Probability &amp;lt;/p&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;total&amp;quot; name=&amp;quot;total&amp;quot; value=&amp;quot;0&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The heavy lifting is of course done by the functions stored in the javascript file &amp;ldquo;converter.js&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function convML(obj) {
  if(/^[\+|-] ?[0-9]+$/.test(obj.value)){
    var pattern = /([+|-]) ?([0-9]+)/;
    var newIP = obj.value.replace(pattern,
      function(fm,$1,$2)
      {
        if ($1==&amp;quot;+&amp;quot;)
        {
          return(Math.round(100.0/(100.0+parseInt($2))*1000)/10.0)
        } else
        {
          return(Math.round(parseInt($2)/(100.0+parseInt($2))*1000)/10.0)
        }
      });
     var newFrac = String(Math.round(100/(newIP/100.0)-100)/100)+&amp;quot;/&amp;quot;+&amp;quot;1&amp;quot;;
     document.getElementById(&#39;ip&#39;).value = newIP;
     document.getElementById(&#39;frac&#39;).value = newFrac;
  }
}

function convFrac(obj) {
  document.getElementById(&#39;ip&#39;).value = obj.value;
// Add decimals

  if(/^[0-9]+\.?[0-9]*\/[0-9]+\.?[0-9]*$/.test(obj.value)){
    var pattern = /([0-9]+\.?[0-9]*)\/([0-9]+\.?[0-9]*)/;
    var newIP  = obj.value.replace(pattern,
                                          function(fm,$1,$2)
                                          {
                                             return(Math.round(1000*parseFloat($2)/(parseFloat($2)+parseFloat($1)))/10.0)
                                          }
                                    );
     document.getElementById(&#39;ip&#39;).value = newIP;
     document.getElementById(&#39;ml&#39;).value = IPtoML(parseFloat(newIP)/100.0);
  }
}
  if(/^[0-9]+\.?[0-9]*$/.test(obj.value)){
    document.getElementById(&#39;ml&#39;).value = IPtoML(parseFloat(obj.value)/100.0);
  }
}

function IPtoML(IP) {
  if (IP &amp;gt; .5) {
    return(&amp;quot;-&amp;quot; + String(Math.round(100.0*IP/(1-IP))))
  } else if (IP &amp;lt;= .5) {
    return(&amp;quot;+&amp;quot;+String(Math.round(100.0/IP - 100)))
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of the conversion functions follows the same format: after each keystroke in the text box, check if the given input is of the correct form, and if it is, upate the other two text boxes with the converted odds. The functionality is very limited, but it fulfills our purposes for now. Converting moneyline odds and implied probability to fractional odds is a tougher challenge, so for now we simiply display them as decimals with a denominator of one (while there is no straightforward one to one mapping to fractional odds, it&amp;rsquo;s possible to write an algorithm to make an educated guess as to what whole number odds are closest, but for now we keep it simple).&lt;/p&gt;
&lt;p&gt;When we open up this HTML page, it works as desired, but when we load it into our extension, it opens up and&amp;hellip; does nothing. None of the fields update themselves, no matter howm much you try. A quick Google search determines that we are barking right up the wrong tree. A few years ago, 
&lt;a href=&#34;https://developer.chrome.com/extensions/contentSecurityPolicy#JSExecution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome banned all inline Javascript&lt;/a&gt; from its extension pages. I have no doubt that they had good security related reasons to do so, but it means that our page as written is quite useless.&lt;/p&gt;
&lt;h2 id=&#34;removing-inline-javascript&#34;&gt;Removing Inline Javascript&lt;/h2&gt;
&lt;p&gt;It turns out that for simple HTML forms like this, the switch is relatively painless. We remove the function calls from the HTML file, so &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ml&amp;quot; name=&amp;quot;ml&amp;quot; onkeyup=&amp;quot;convML(this)&amp;quot;/&amp;gt;&lt;/code&gt; becomes &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ml&amp;quot; name=&amp;quot;ml&amp;quot;/&amp;gt;&lt;/code&gt;. Then, in our &amp;ldquo;converter.js&amp;rdquo; file, we need to add an EventListener function to process each of these events, based on their ID.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function(event) {
  document.getElementById(&amp;quot;ml&amp;quot;).addEventListener(&amp;quot;keyup&amp;quot;, function() {
        convML(document.getElementById(&#39;ml&#39;));
     });
  document.getElementById(&amp;quot;frac&amp;quot;).addEventListener(&amp;quot;keyup&amp;quot;, function() {
        convFrac(document.getElementById(&#39;frac&#39;));
     });
  document.getElementById(&amp;quot;ip&amp;quot;).addEventListener(&amp;quot;keyup&amp;quot;, function() {
        convIP(document.getElementById(&#39;ip&#39;));
     });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rest of our code can stay the exact same. Once we use the EventListener format, our other Javascript functions work just fine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OddsConverter Part 1: Converting Plaintext</title>
      <link>https://dylanpotteroconnell.netlify.app/2018/01/22/oddsconverter-part1/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/01/22/oddsconverter-part1/</guid>
      <description>&lt;p&gt;The same betting odds are often displayed in disparate ways, depending on the context. In America, normally in terms of a Moneyline, where +200 is shorthand for &amp;ldquo;if you bet \$100, you can win an additional \$200&amp;rdquo;. In other contexts, we generally see the tradition &amp;ldquo;X/Y&amp;rdquo; fractional odds. Both of these have clear mathematical meanings, but for inexperienced bettors, they tend to be poor conveyors of intuitive meaning. We can quickly estimate what &amp;ldquo;+350&amp;rdquo; implies, but for most people, it takes a mental calculation to do so. The most useful intuitive information about betting odds comes from the &amp;ldquo;Implied Probability&amp;rdquo;, which is the probability of the event necessary for you to &amp;ldquo;break even&amp;rdquo; on the bet. Betting sites don&amp;rsquo;t particularly like Implied Probability because it makes the cut they take more obvious (when mutually exclusive and complete events have probabilities that sum up to greater than one), and more intuitively accurate information for bettors can make them realize how daunting it is to actually keep up a positive expected value.&lt;/p&gt;
&lt;p&gt;As someone without the perfect intuition needed to convert these odds in my head, I got tired of glancing at a table of odds and trying to work out their precise value one by one. I thought it would be nice to have a very simple Google Chrome extension that could do it for me. The initial functionality is simple: click on the icon, and it converts any odds it can find on the page into Implied Probability. Click on it again, and it converts back. The challenge is that I have zero knowledge of JavaScript. Luckily, this task was simple enough that it could be cobbled together in the style of Frankenstein&amp;rsquo;s monster, with some slight modifications.&lt;/p&gt;
&lt;h2 id=&#34;click-icon-replace-text&#34;&gt;Click Icon, Replace Text&lt;/h2&gt;
&lt;p&gt;The first feature necessary is simple an extension that runs a script when the icon is clicked. We find a 
&lt;a href=&#34;https://stackoverflow.com/questions/7168362/run-script-each-time-chrome-extension-icon-clicked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow question&lt;/a&gt; (which will be the source of the code for most of the extension) with this very task. Every Chrome Extension begins with a manifest.json file, which gives an overview of the permissions and structure of the extension. I grab their initial suggested manifest.json, and make a number of modifications which will become necessary later. The &amp;ldquo;contextmenus&amp;rdquo; under permissions is only necessary to activate context menus within Chrome, which seems like a useful feature but is not yet crucial to the Extension&amp;rsquo;s functionality. I also made a set of three simple icons in GIMP, so that it looks natural in the browser. The key parts here are the two scripts under &amp;ldquo;background&amp;rdquo;. &amp;ldquo;rightclick.js&amp;rdquo; provides instructions for how to create a context menu upon right click, which we ignore for now (I played with it, but it&amp;rsquo;s still a work in progress). However, &amp;ldquo;background.js&amp;rdquo; is the script that tells our&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
{
  &amp;quot;manifest_version&amp;quot;: 2,

  &amp;quot;name&amp;quot;: &amp;quot;Convert Odds into Implied Probability&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Click this icon to convert moneyline odds into implied probability, and vice versa.&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;background&amp;quot; : {
    &amp;quot;scripts&amp;quot; : [&amp;quot;background.js&amp;quot;, &amp;quot;rightclick.js&amp;quot;]
  },
  &amp;quot;icons&amp;quot;: { &amp;quot;16&amp;quot;: &amp;quot;icon16.png&amp;quot;,
             &amp;quot;48&amp;quot;: &amp;quot;icon48.png&amp;quot;,
             &amp;quot;128&amp;quot;: &amp;quot;icon128.png&amp;quot; },

  &amp;quot;browser_action&amp;quot;: {
    &amp;quot;default_icon&amp;quot;: &amp;quot;icon48.png&amp;quot;,
    &amp;quot;default_title&amp;quot;: &amp;quot;Convert Odds&amp;quot;
  },
  &amp;quot;permissions&amp;quot;: [
    &amp;quot;activeTab&amp;quot;,
    &amp;quot;contextMenus&amp;quot;
  ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key parts here are the two scripts under &amp;ldquo;background&amp;rdquo;: &amp;ldquo;rightclick.js&amp;rdquo; provides instructions for how to create a context menu upon right click, which we ignore for now (I played with it, but it&amp;rsquo;s still a work in progress), and &amp;ldquo;background.js&amp;rdquo; is a script that calls our text replace script when the Extension icon is clicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;chrome.browserAction.onClicked.addListener(function(tab) {
   chrome.tabs.executeScript(null, {file: &amp;quot;replaceScript.js&amp;quot;});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ldquo;replaceScript.js&amp;rdquo; is the script that  runs a text replacement that converts anything that &amp;ldquo;looks like&amp;rdquo; odds into implied probabilities (and you can view the final script 
&lt;a href=&#34;https://github.com/dylanpotteroconnell/oddsextension/blob/master/replaceScript.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). Being totally unfamiliar with JavaScript, I grab code from an Extension that performs a 
&lt;a href=&#34;https://9to5google.com/2015/06/14/how-to-make-a-chrome-extensions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simple text replace for each webpage&lt;/a&gt;. The base structure is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var elements = document.getElementsByTagName(&#39;*&#39;);
for (var i = 0; i &amp;lt; elements.length; i++) {
    var element = elements[i];
    for (var j = 0; j &amp;lt; element.childNodes.length; j++) {
        var node = element.childNodes[j];
        if (node.nodeType === 3) {
            var pattern = /abc/gi;
            var text = node.nodeValue;
            var replacedText = text.replace(pattern, &#39;def&#39;);
            if (replacedText !== text) {
                element.replaceChild(document.createTextNode(replacedText), node);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;detect-patterns-calculate-conversions&#34;&gt;Detect Patterns, Calculate Conversions&lt;/h2&gt;
&lt;p&gt;Next, we can use Regular Expressions to only replace certain structures of characters, rather than just one static string. To start, we want to try and identify sequences of exactly a plus or minus sign, followed by at least one digit (e.g. &amp;ldquo;-220&amp;rdquo;). The parentheses &amp;ldquo;capture&amp;rdquo; the characters inside, as we need to not just find these patterns, but extract the numbers. We want to find the end of the digits, but we want to leave the following character in the page&amp;rsquo;s HTML, so we &amp;ldquo;grab&amp;rdquo; the first nondigit character (the [^0-9), but only if it exists (the &amp;ldquo;?&amp;quot;) using &amp;ldquo;([^0-9]?)&amp;quot;, so that we can place that character after our converted expression, &lt;code&gt;var pattern = /([+|-])([0-9]+)([^0-9]?)/gi;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, the challenge is that we want to perform a small calculation using the number provided. That means we need to be able to feed captured characters (preferably, the numbers and the +/- sign) as inputs into a function that determines the output of the replace function of text. I don&amp;rsquo;t know of the optimal way to do this in JavaScript, but with a Google search we find a way to do just that 
&lt;a href=&#34;https://www.bennadel.com/blog/55-using-methods-in-javascript-replace-method.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can replace the previous string used for our pattern with a lambda function. Note that the link provided is inaccurate in its description of the inputs to the lambda function, and this is corrected to the comments. The inputs to the dummy function here are always &amp;ldquo;the full match, $1, $2, $3, &amp;hellip;&amp;rdquo; (where $X refers to the xth capture element), while in the linked tutorial they use &amp;ldquo;$1$&amp;rdquo; in the function input to refer to the full text. We can adapt their function to convert an American moneyline into its implied odds as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var replacedText = text.replace(pattern,
                                function(fm,$1,$2,$3)
				    {
				      if ($1==&amp;quot;+&amp;quot;)
				      {
					return(&amp;quot;|&amp;quot;+String(Math.round(100.0/(100.0+parseInt($2))*1000)/10.0)+&amp;quot;\%&amp;quot;+&amp;quot;|&amp;quot;+$3)
				      } else
				      {
					return(&amp;quot;|&amp;quot;+String(Math.round(parseInt($2)/(100.0+parseInt($2))*1000)/10.0)
						 +&amp;quot;\%&amp;quot;+&amp;quot;|&amp;quot;+$3)
				      }
				    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s worth breaking this into parts. The inputs to our function are the full text (&amp;lsquo;fm&amp;rsquo;, which we do not use here, but I was not aware of how to suppress this input), and the three strings &amp;lsquo;captured&amp;rsquo; from our regex matching (where $1 refers to the +/- sign, $2 is the number of the line, and $3 is the trailing character). We compute the simple formula to go from a moneyline bet to its implied odds. For a moneyline of +$X, we earn $X+$100 on a win. Thus, the odds (O) needed to break even are $100=0*($X+$100), so O=$100/($X+$100). Similarly, for a moneyline of -$X, we bet $X to win $100, and the implied odds are O=$X/($X+$100). The final return statement is simply cobbled together from some JavaScript documentation. ParseInt turns the &amp;lsquo;$2&amp;rsquo; input into an integer, we then multiply by 1000, and divide by 10 to get the result in the form of a percentage with a single decimal place.&lt;/p&gt;
&lt;p&gt;We repeat this process with two other conversions: 2. Fractional Odds (i.e. &amp;ldquo;3/1&amp;rdquo;) to Implied Probability, and 3. &amp;ldquo;Undoing&amp;rdquo; our first conversion, converting implied probabilities back into moneyline odds. We do not include a separate &amp;ldquo;undo&amp;rdquo; conversion for Fractional Odds, because I wanted to keep this extension very minimal, and detecting the most accurate Fractional Odds to a rounded decimal percentage is a less straightforward conversion.&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&amp;hellip;&lt;/h2&gt;
&lt;p&gt;This results in a simple but effective Chrome Extension that can save quite a bit of time. When on a page with odds in HTML text, you tap the button and can quickly see them replaced by their Implied Probabilities. The major downside is that more complex websites don&amp;rsquo;t always show their odds in such simple HTML text, and learning to detect them for the major bookmakers would be a more substantial challenge. However, most people encounter odds referenced in articles or text discussions, where this Extension works quite cleanly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
