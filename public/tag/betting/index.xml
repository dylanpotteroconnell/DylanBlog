<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>betting | Dylan&#39;s Blog</title>
    <link>https://dylanpotteroconnell.netlify.app/tag/betting/</link>
      <atom:link href="https://dylanpotteroconnell.netlify.app/tag/betting/index.xml" rel="self" type="application/rss+xml" />
    <description>betting</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 08 Nov 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dylanpotteroconnell.netlify.app/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>betting</title>
      <link>https://dylanpotteroconnell.netlify.app/tag/betting/</link>
    </image>
    
    <item>
      <title>A Gentle Introduction to Parlays and Independence </title>
      <link>https://dylanpotteroconnell.netlify.app/2018/11/08/parlays-independence/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/11/08/parlays-independence/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Betting parlays of positively correlated events will generally be profitable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This statement is far from revolutionary, and will be obvious to those familar with the fundamentals of betting. However, I&amp;rsquo;ve talked to many folks with no prior experience who wanted to learn more. I thought it would be interesting and fun to write up a basic tutorial in this concept which assumes minimal background in probability (and should provide good intuition even with no mathematical foundation). This post is intended as an exercise in explaining concepts at an introductory level, and should be ignored by those who are already comfortable with the tools of probability (although many might find the 2018 election parlay opportunities of interest).&lt;/p&gt;
&lt;h1 id=&#34;betting&#34;&gt;Betting&lt;/h1&gt;
&lt;p&gt;Most people are familiar with the concept of a bet. I might flip a coin, and the loser pays the winner a dollar, which feels like a fair deal. Implicit in our evaluation of this bet as &amp;ldquo;fair&amp;rdquo; is the concept of Expected Value (EV). While this will avoid the mathematical definition whenever possible, we tend to have an intuitive sense of EV when we confront it in our daily lives. The fact that the coin flipping game is &amp;ldquo;fair&amp;rdquo; is obvious due to its symmetry. But if I instead offered to roll a die, and said that on a one through four you pay me a dollar, and on a five or six I pay you two dollars, many people would intuitively see this bet as fair as well. I have twice the chance to win, but have to pay out twice as much. Mathematically, we simply find the sum of all the outcomes multiplied by their probability of occurrence. I have \(2/3\) chance to pay you a dollar, and \(1/3\) chance to win two dollars, and \(-1*\frac{2}{3} + 2*\frac{1}{3} = 0\).&lt;/p&gt;
&lt;p&gt;When it comes to betting, it&amp;rsquo;s worth noting that Expected Value is the &lt;em&gt;only&lt;/em&gt; viable way to consider the outcome, and any other metric is bound to be a losing strategy in the long run. That doesn&amp;rsquo;t mean it applies in every practical situation. If I offered you a deal where I would double your life&amp;rsquo;s savings with a 55% chance, and you would lose it all with 45% chance, this is clearly a positive expected value bet, and it is also one that you should demonstrably &lt;em&gt;never&lt;/em&gt; take. The marginal utility of money states that the value of doubling your life savings does not equate to the loss from losing your life&amp;rsquo;s savings. This is a reminder that betting is particularly problematic in any situation where the stakes are not so low that you can focus solely on EV. If someone offered you the same deal on each of your individual dollars in your life savings independently, then it would be a consistently profitable proposition with essentially no downside, due to the law of large numbers. (And if one&amp;rsquo;s life savings is not suitably large so that the law of large numbers applies, betting should be far from your mind). This is not the purpose of this summary, but for anyone who does plan to place bets, it is essential that they give some preliminary consideration to the marginal utility of money, bankroll management, and the law of large numbers.&lt;/p&gt;
&lt;h1 id=&#34;betting-notation&#34;&gt;Betting Notation&lt;/h1&gt;
&lt;p&gt;In America, bets are usually denoted using the Moneyline system, where odds are reported in the form of \(\pm X-[\)hundred]. A +\(200\) line says that if you bet \$100 and win, you receive back \$200 plus your original bet. A \(-250\) line says that if you bet \$250 and win, you win \$100 (and of course also win back your original bet). This system makes it intuitive to measure your payout on a specific bet, but it is somewhat opaque when newer bettors try and understand the corresponding probabilities associated with each bet. We can work in terms of &amp;ldquo;Implied Odds&amp;rdquo;, which are simply the corresponding percentage chance that you would need to win for the bet to be breakeven in expected value. A +200 Moneyline has corresponding Implied Odds of 33.3%. Abroad, odds are frequently reported in fractional terms, a +200 Moneyline corresponds to 2/1 (&amp;ldquo;two to one&amp;rdquo;) odds. We note that Moneyline odds will be in the form of plus or minus at least \(100\). American sports will also report bettling lines such as the New England Patriots being \(-7.5\) for their game. This is a &lt;em&gt;point spread&lt;/em&gt;, where there is even money to be made betting whether the Patriots will score at least \(7.5\) more points than their opponent. I personally find it nearly impossible to quickly understand Moneyline odds in terms of probabilities, so I built a light 
&lt;a href=&#34;https://chrome.google.com/webstore/detail/odds-converter/klechkhopfnjihobbcfeheooaigjjgdg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome extension&lt;/a&gt; that can quickly perform these conversions on the fly.&lt;/p&gt;
&lt;h1 id=&#34;parlays&#34;&gt;Parlays&lt;/h1&gt;
&lt;p&gt;Standard bets offer a payout based on a binary result. You might bet that the Golden State Warriors win the NBA title (&amp;ldquo;NBA Futures&amp;rdquo;), or that the Eagles score at least six more points than the Raiders in their upcoming game (&amp;ldquo;beating the spread&amp;rdquo;). A bettor who has fallen on hard times might have little to do for the whole weekend but watch sports, and could place separate bets that Alabama beats Oklahoma and that Clemson beats Notre Dame in the College Football Playoff. However, they could also &amp;ldquo;parlay&amp;rdquo; events, in which they &lt;em&gt;only&lt;/em&gt; get paid out if &lt;em&gt;both&lt;/em&gt; those events occur (if Clemson beats ND but Alabama loses, then they would receive nothing). This seems like a scam, but the allure is that under a parlay the payoffs are multiplicative, and much more lucrative than simply the sum of those individual payouts. This is alluring to many bettors because it promises large paydays. In the above example, Alabama and Clemson were both large favorites, at -555 and -440 respectively (i.e. you have to place a bet of \$555 or \$440 to win a prize of \$100 if you are correct). Parlays are appealing to bettors because we have poor intuition for the likelihood of a number of independent (explained below) very likely events &lt;em&gt;all&lt;/em&gt; occurring. This fallacy is ubiquitous. In college football, when halfway through the season, a dozen contenders are 6-0, analysts and fans tend to look at their upcoming schedule, see that they are favored in each of those six games, and tend to muse about the situation in which each of those individually likely events occurs. In politics, readers are perplexed when analysts predict that of some 100 house races that lean solidly to one side, there will very likely be &lt;em&gt;some&lt;/em&gt; number of shocking upsets, even if we don&amp;rsquo;t know which one. Our mind works by considering individual events. If I can&amp;rsquo;t tell you &lt;em&gt;which&lt;/em&gt; remaining football game your team is likely to lose, you may be accustomed to think that the most likely result is that you don&amp;rsquo;t lose a single one, even when that is an unlikely event (as shown by the fact that even the top contenders tend to lose a game by the end of the college football season).&lt;/p&gt;
&lt;p&gt;On the other hand, parlays are appealing to bookies because they encourage more betting, and bookies profit from the volume of bets placed. There is no &lt;em&gt;catch&lt;/em&gt; here, and the bookies give a fair price on a parlay. Instead of the Clemson &amp;amp; Alabama example, we consider one where the probabilities are intuitive, with an extremely boring bookie that allows you to bet on the results of die rolls with no rake (which is the tax they take as profit on any bet placed). In each case, you bet \$1. For Bet A, they toss two dice, and you win \$12 (including your bet) when they sum to at least 11. For Bet B, they toss a single die, and you win \$6 (including your bet) if they roll a six. Both these bets have an expected value of 0. For Bet A, this has a 1 in 12 chance of occuring, so if you have placed a \$1 bet, you have a 1 in 12 chance of winning \$12, which is fair (and the same for Bet B with a 1 in 6 chance).&lt;/p&gt;
&lt;p&gt;If you wanted to up the stakes and instead ask for a parlay on these events, you could significantly increase your possible payout. Bookies are perfectly fair when it comes to parlays. They set their own lines, and choose how much &amp;ldquo;rake&amp;rdquo; to take from the bets, but when it comes to parlays, bookies follow a simple formula which preserves the expected value of the payouts. They simply consider it the same as a single bet on the event where both happen, with that probability computed by multiplying the individual probabilities together. In the case above, a parlay of Bet A and Bet B would yield a whopping \$72 payout when it hits. This calculation is predicated on the idea that the probability that both A and B occur is the product of their individual probabilities, so \(1/6 * 1/12 = 1/72\). If we use the mathematical shorthand \(P(A)\) to denote &amp;ldquo;Probability of Bet A succeeding&amp;rdquo;, and \(P(A,B)\) for &amp;ldquo;probability of both Bet A and Bet B succeeding&amp;rdquo;, we write this as \(P(A)*P(B)=P(A,B)\). Those familiar with probability will note that this formula holds for any two events which are &lt;em&gt;independent&lt;/em&gt;, that is, where information about the result of one event tells us nothing about the result of the other.&lt;/p&gt;
&lt;p&gt;Independence is a mathematically defined concept, but we have an intuition for its meaning. If I ask you to guess the probability that a baby is born on a white Christmas (that is, on a December 25th where it snows), you would be foolish to take the probability that the baby is born on December 25th, and multiply it by the probability that it is snowing on any given day. It is significantly more likely that it snows on December 25th than the average day because it is in the middle of winter. The proper calculation would be to find the product of the probabilities that it is December 25th, and that it is snowing on any given December 25th (a conditional probability, whose  definition we sidestep here). Luckily, in the case of our dice rolling bookie, independence is pretty irrefutable. Assuming that the dice are fair and properly weighted, the results of the first pair of rolls have no effect on the outcome of some later rolls.&lt;/p&gt;
&lt;h1 id=&#34;parlays-of-dependent-events&#34;&gt;Parlays of Dependent Events&lt;/h1&gt;
&lt;p&gt;This prompts the question, how do parlays work when the events are not independent? The short answer is that bookies generally do not offer parlays on dependent events, and that parlaying events that are positively correlated (i.e. the chance of one occurring makes it more likely that the other occurs) is profitable for the bettor. Luckily, most bets offered by the bookie tend to be independent. The scores of football games on a given Sunday seem to have little relation to one another. The most common bets to show dependence in fact show a &lt;em&gt;negative&lt;/em&gt; correlation, when only one can occur. A parlay on NBA futures where both the Golden State Warriors and the Cleveland Cavaliers win the NBA title is clearly nonsensical (the fact that the probability of both occurring is 0 is a form of dependence).&lt;/p&gt;
&lt;p&gt;What happens if a bookie allows betting on positively correlated events? This is best demonstrated by example. We consider Bet A and Bet B again, but with a twist. Bet A remains the same, but now define Bet B to be whether the first die rolled &lt;em&gt;of those used for Bet A&lt;/em&gt; is a six (rather than rolling a new die. Clearly, the individual probabilities are the same. However, these events are no longer independent. Intuitively, the success of Bet B (so the first roll is a 6) greatly increases the chance that Bet A succeeds (although it does not guarantee it). More precisely, the probability that both Bet A and Bet B occur is simply 1/18, as there are two possible rolls that are valid ([6,5] and [6,6]). However, \(1/18 &amp;gt; 1/72 = 1/6*1/12\). Thus, if the bookie provided an \$18 payout on this parlay, it would be break even for the bettor. If they provided the $72 pay out prescribed by the standard parlay formula, a bettor would print money in the long run.&lt;/p&gt;
&lt;p&gt;Correlated events still have a &amp;ldquo;correct&amp;rdquo; and fair price (in the example above, it was the substantially reduced price of $18). However, this computation required knowledge of their exact correlation. This is straightforward when it comes to the rolling of two dice, but difficult when it comes to the complex real world bets that bookies profit from. We can intuitively guess that the Super Bowl prop bet &amp;ldquo;Tom Brady throws for two or more touchdowns&amp;rdquo; is likely correlated with the bet &amp;ldquo;The Patriots (his team) win the Super Bowl&amp;rdquo;. In the world where we know Brady had a prolific scoring night, his team&amp;rsquo;s chances of winning are much higher (having essentially &amp;ldquo;removed&amp;rdquo; all of the worlds in which the Patriots offense was shut out, many of which were losing scenarios). But it is very difficult to estimate precisely how correlated those events are.&lt;/p&gt;
&lt;p&gt;Bookies prefer the simple solution: they do not offer correlated parlays. You can bet separately on these events, but they offer a singular pricing formula for parlays. Either the events are independent (in which case the probabilities are multicative, and they use their standard pricing formula), or they do not offer the parlay. In the world of sports, the divide between dependence and independence is usually fairly clear. Events in separate games on the same day should be independent. Events &lt;em&gt;within the same game&lt;/em&gt; tend not to be. There are correlations between a wide variety of events within the same game, even if it isn&amp;rsquo;t as obvious as &amp;ldquo;touchdowns scored&amp;rdquo; and &amp;ldquo;final result&amp;rdquo;. If a basketball team has twin stars, there will tend to be a slight negative correlation between their points scored, because there are a limited number of possessions and each shot taken by one player is a shot the other does not take. There are of course mitigating factors: a high scoring night for one player might indicate that the opposing defense is poor, or the two stars might both pass less to their supporting cast on nights when those role players are shooting poorly. But neither effect tends to outweigh the simple fact that there are a limited number of shots in the game. Bookies feel no obligation to attempt to set the correct price on these myriad combinations, and instead allow for parlays solely in the case of obviously plausible independence.&lt;/p&gt;
&lt;h1 id=&#34;parlays-in-political-elections&#34;&gt;Parlays in Political Elections&lt;/h1&gt;
&lt;p&gt;In practice, the statement &amp;ldquo;bookies do not allow for correlated parlays&amp;rdquo; is a sweeping generalization. Bookies make mistakes, and the &amp;ldquo;rake&amp;rdquo; that they take allows for a reasonable margin of error. It is better practice for them to consistently offer bets that attract bettors, than worry about the singular case in which they make a small mistake and suffer a loss. Bookies limit the amount that can be wagered at any given time, so even when they set an inaccurate line, they are not fleeced by sharp gamblers with deep pockets. It is always worth keeping an eye out for situations where bookies might slip up and offer such a profitable parlay.&lt;/p&gt;
&lt;p&gt;One such example came in the form of the 2018 midterm elections. Bookies offered bets on the results of individual races, general trends (&amp;ldquo;How many seats do Republicans gain in the Senate?&amp;quot;), and more. Some correlations are powerful and obvious. The result that Josh Hawley (Missouri), Dean Heller (Nevada), and Mike Braun (Indiana) win their Senate races is highly correlated with the GOP retaining control of the Senate. If they win those three close races, the odds that they somehow lose enough much more safe Senate seats for the Democrats to flip control is next to 0. I did not see any bookie foolish enough to allow parlays on these events. Generally, bookies are acutely aware that vertical structures like this (where one result is an aggregate of many individual results) have clear positive correlation.&lt;/p&gt;
&lt;p&gt;However, there was at least one bookie that allowed for parlays of &lt;em&gt;individual&lt;/em&gt; Senate races. For bookies accustomed to sports, this might seem sensible, as it is superficially similar to parlaying simultaneous game results. However, separate senate races can show obvious and consistent correlation. Some may dislike the language of this claim, as philisophically, it depends on your probabilistic interpretatin of a political race. It&amp;rsquo;s hard to see the connection between the senate choice of individual voters in Arizona and Nevada. However, under that framework, it&amp;rsquo;s hard to see how random chance enters the equation at all (voters are not flipping a coin at the ballot box, by and large). This ties into a deeper issue of how we interpret probabilistic forecasts, but my short answer would be that we use probability describe level of uncertainty about complex phenomena.&lt;/p&gt;
&lt;p&gt;Polling is the base staple of an election prediction. Even in the fantastical world where polls represent a perfectly random sampling of the entire voting population, there is the uncertainty that stems from the inherent randomness of such a random sample (luckily, this form of uncertainty is easy to mathematically model, and disappears as our sample gets very large). Then there is the uncertainty comes from the practical realities of imperfect polling, which crudely violates the simple assumptions taught in an introductory probability class (consider the work 538 does to grade pollsters as part of this uncertainty). And the final nebulous level of uncertainty comes from translating the results of the poll (which studies on a specific date who people say they plan to vote for) to the results of the election itself (determined by the choice of people who actually place a vote). These are two separate questions, and even if a poll precisely answers its own question, the translation of that to answer the second question can be clouded by the uncertainty of news that breaks after the poll is conducted, or voters who think it over some more and get cold feet, or a storm which prevents those without a car from making their way to the polling station, or any number of ways that these questions can differ. Election models have to grapple with these layers of uncertainty, and as a result a site like 538 reports that Ted Cruz has a &amp;ldquo;7 in 9&amp;rdquo; chance to beat Beto O&amp;rsquo;Rourke, and not complete certainty.&lt;/p&gt;
&lt;p&gt;The claim that election results are correlated fits neatly into this framework. It&amp;rsquo;s hard to define the connection between the individual decisions of voters in two states about two different pairs of candidates. But it&amp;rsquo;s easy to see how the errors in the probabilitic forecast would be connected. This is particularly true in the heavily partisan landscape of our current political system. The senate races in Nevada and Arizona aren&amp;rsquo;t entirely separate. In each of these demographically similar states, the populace is choosing between a democrat and a republican. Thus, certain forecasting errors made in one state tend to be mirrored in the other. The mistakes that pollsers make which could underestimate latino turnout will cause a similar divergence from the election forecasts and the final result in the two states.&lt;/p&gt;
&lt;p&gt;This implies that even in a world where the election outcomes are random according to the exact probabilities prescribed by the betting markets, a parlay offers a chance for profit. The positive correlation of these two results simply needs to outweigh the cost of the rake on these bets for these bets to have a positive expected value.&lt;/p&gt;
&lt;p&gt;We can illustrate this with the example of the bets I placed on the 2018 midterms. A significantly more complex and involved strategy could be used to profit from this parlaying opportunity, but this was just a fun example of the concept in practice.&lt;/p&gt;
&lt;h1 id=&#34;post-incomplete&#34;&gt;POST INCOMPLETE&lt;/h1&gt;
&lt;p&gt;To be continued&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OddsConverter Part 3: Uploading to the Chrome Store</title>
      <link>https://dylanpotteroconnell.netlify.app/2018/03/01/oddsconverter-part3/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/03/01/oddsconverter-part3/</guid>
      <description>&lt;p&gt;Brief update to the 
&lt;a href=&#34;https://dylanpotteroconnell.github.io/bettingextension2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;past post&lt;/a&gt;. I knew a few people who wanted to try the extension, so I thought it’d be a fun exercise to go through the process of uploading it to the Chrome store. You can view and add the extension to your own browser 
&lt;a href=&#34;https://chrome.google.com/webstore/detail/odds-converter/klechkhopfnjihobbcfeheooaigjjgdg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. This is far from a polished state, given that it was meant to be a quick way to explore something new. However, I do find myself using the finished product a surprising amount, so I thought it was worth keeping on the Webstore. And it’s nice to see how easy Google makes it to upload a simple app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Odds Converter Part 2: Conversion Webpage</title>
      <link>https://dylanpotteroconnell.netlify.app/2018/01/25/oddsconverter-part2/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/01/25/oddsconverter-part2/</guid>
      <description>&lt;h2 id=&#34;opening-a-new-page&#34;&gt;Opening a New Page&lt;/h2&gt;
&lt;p&gt;Our simple extension from 
&lt;a href=&#34;https://dylanpotteroconnell.github.io/bettingextension/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;last time&lt;/a&gt; works quite well to replace text on a page, but whenever text isn&amp;rsquo;t displayed in a nice format (which is true for many mdoern websites), it won&amp;rsquo;t do much good. The hope is to add functionality to it so that the user can easily and manually input the odds that they need. My vision was to let the user right click, and open up a page that lets them impute the odds to convert in a more detailed format.&lt;/p&gt;
&lt;p&gt;As before, I don&amp;rsquo;t know enough about Javascript to start from scratch, so I borrow and adapt from some others online. 
&lt;a href=&#34;https://stackoverflow.com/questions/4376167/text-selection-and-display-in-context-menu-chrome-extension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This StackOverflow answer&lt;/a&gt; provides an example of creating a context menu upon a user right click that is the right structure. Importantly, this also provides a framework for storing any selected text that the user right clicks. The end goal is to let them auto populate our odds converter page, so we leave in that functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;\\ rightClick.js
var selection_callbacks = [];
function getSelection(callback) {
 selection_callbacks.push(callback);
    chrome.tabs.executeScript(null, { file:&amp;quot;selection.js&amp;quot; });
  };
  chrome.extension.onRequest.addListener(function (request) {
    var callback = selection_callbacks.shift();
    callback(request);
  });

function openConverter(selectedText) {
  var serviceCall = &#39;converter.html&#39;
  chrome.tabs.create({ url: serviceCall });
}
var tx = getSelection();
var title = &amp;quot;Convert: &#39;&amp;quot; + tx + &amp;quot;&#39; title&amp;quot;;
var id = chrome.contextMenus.create({
    title: &amp;quot;Convert Odds?&amp;quot;,
    contexts:[&amp;quot;selection&amp;quot;],
    onclick: function(info, tab) {
        openConverter(info.selectionText);
    }
});
console.log(&amp;quot;selection item:&amp;quot; + id);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;\\ selection.js
chrome.extension.sendResponse(convert(window.getSelection().toString()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty rote, with small changes from the linked work (and final code 
&lt;a href=&#34;https://github.com/dylanpotteroconnell/oddsextension/blob/master/replaceScript.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). Initially, I hoped to perform some calculations with the selected text, and then display the result in the context menu itself. After some trial and error, it seems that this is quite a bit more complicated than it would seem. While you can reference the text in the selection using &amp;ldquo;%s&amp;rdquo;, the issue is that this is passed through our function as the literal string &amp;ldquo;%s&amp;rdquo;, and not the selection itself, until it is displayed (at which point it is replaced by tthe selection). This means we can&amp;rsquo;t easily perform a calculation with it. The underlying challenge is that Chrome wants to display the text on the context menu immediately, so we would need to manually program in a structure that lets it wait for us to convert the text. For now, we instead focusing on simply opening the useful HTML page &amp;ldquo;oddsconverter.html&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;odds-converter-html-page&#34;&gt;Odds Converter HTML Page&lt;/h2&gt;
&lt;p&gt;We want an HTML page that neatly converts between each sort of odds. For a rough idea of the base template, we borrow 
&lt;a href=&#34;https://www.daniweb.com/programming/web-development/threads/468068/auto-calculate-two-textfields&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; guide. While their goal is quite unrelated, this form has the neat feature where it calculates its result after &lt;em&gt;each&lt;/em&gt; keystroke. I want this extension to be light and nimble, so I like the idea of it constantly updating based on new input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;!-- https://www.daniweb.com/programming/web-development/threads/468068/auto-calculate-two-textfields --&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=&amp;quot;converter.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;form name=&amp;quot;convert&amp;quot; action=&amp;quot;&amp;quot; id=&amp;quot;convert&amp;quot; &amp;gt;
    &amp;lt;span id=&amp;quot;update&amp;quot;&amp;gt;Odds Converter&amp;lt;/span&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ml&amp;quot; name=&amp;quot;ml&amp;quot; onkeyup=&amp;quot;convML(this)&amp;quot;/&amp;gt; Money Line &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;frac&amp;quot; name=&amp;quot;frac&amp;quot; onkeyup=&amp;quot;convFrac(this)&amp;quot;/&amp;gt; Fractional Odds &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ip&amp;quot; name=&amp;quot;ip&amp;quot; onkeyup=&amp;quot;convIP(this)&amp;quot;/&amp;gt; Implied Probability &amp;lt;/p&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;total&amp;quot; name=&amp;quot;total&amp;quot; value=&amp;quot;0&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The heavy lifting is of course done by the functions stored in the javascript file &amp;ldquo;converter.js&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function convML(obj) {
  if(/^[\+|-] ?[0-9]+$/.test(obj.value)){
    var pattern = /([+|-]) ?([0-9]+)/;
    var newIP = obj.value.replace(pattern,
      function(fm,$1,$2)
      {
        if ($1==&amp;quot;+&amp;quot;)
        {
          return(Math.round(100.0/(100.0+parseInt($2))*1000)/10.0)
        } else
        {
          return(Math.round(parseInt($2)/(100.0+parseInt($2))*1000)/10.0)
        }
      });
     var newFrac = String(Math.round(100/(newIP/100.0)-100)/100)+&amp;quot;/&amp;quot;+&amp;quot;1&amp;quot;;
     document.getElementById(&#39;ip&#39;).value = newIP;
     document.getElementById(&#39;frac&#39;).value = newFrac;
  }
}

function convFrac(obj) {
  document.getElementById(&#39;ip&#39;).value = obj.value;
// Add decimals

  if(/^[0-9]+\.?[0-9]*\/[0-9]+\.?[0-9]*$/.test(obj.value)){
    var pattern = /([0-9]+\.?[0-9]*)\/([0-9]+\.?[0-9]*)/;
    var newIP  = obj.value.replace(pattern,
                                          function(fm,$1,$2)
                                          {
                                             return(Math.round(1000*parseFloat($2)/(parseFloat($2)+parseFloat($1)))/10.0)
                                          }
                                    );
     document.getElementById(&#39;ip&#39;).value = newIP;
     document.getElementById(&#39;ml&#39;).value = IPtoML(parseFloat(newIP)/100.0);
  }
}
  if(/^[0-9]+\.?[0-9]*$/.test(obj.value)){
    document.getElementById(&#39;ml&#39;).value = IPtoML(parseFloat(obj.value)/100.0);
  }
}

function IPtoML(IP) {
  if (IP &amp;gt; .5) {
    return(&amp;quot;-&amp;quot; + String(Math.round(100.0*IP/(1-IP))))
  } else if (IP &amp;lt;= .5) {
    return(&amp;quot;+&amp;quot;+String(Math.round(100.0/IP - 100)))
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of the conversion functions follows the same format: after each keystroke in the text box, check if the given input is of the correct form, and if it is, upate the other two text boxes with the converted odds. The functionality is very limited, but it fulfills our purposes for now. Converting moneyline odds and implied probability to fractional odds is a tougher challenge, so for now we simiply display them as decimals with a denominator of one (while there is no straightforward one to one mapping to fractional odds, it&amp;rsquo;s possible to write an algorithm to make an educated guess as to what whole number odds are closest, but for now we keep it simple).&lt;/p&gt;
&lt;p&gt;When we open up this HTML page, it works as desired, but when we load it into our extension, it opens up and&amp;hellip; does nothing. None of the fields update themselves, no matter howm much you try. A quick Google search determines that we are barking right up the wrong tree. A few years ago, 
&lt;a href=&#34;https://developer.chrome.com/extensions/contentSecurityPolicy#JSExecution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome banned all inline Javascript&lt;/a&gt; from its extension pages. I have no doubt that they had good security related reasons to do so, but it means that our page as written is quite useless.&lt;/p&gt;
&lt;h2 id=&#34;removing-inline-javascript&#34;&gt;Removing Inline Javascript&lt;/h2&gt;
&lt;p&gt;It turns out that for simple HTML forms like this, the switch is relatively painless. We remove the function calls from the HTML file, so &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ml&amp;quot; name=&amp;quot;ml&amp;quot; onkeyup=&amp;quot;convML(this)&amp;quot;/&amp;gt;&lt;/code&gt; becomes &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;ml&amp;quot; name=&amp;quot;ml&amp;quot;/&amp;gt;&lt;/code&gt;. Then, in our &amp;ldquo;converter.js&amp;rdquo; file, we need to add an EventListener function to process each of these events, based on their ID.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function(event) {
  document.getElementById(&amp;quot;ml&amp;quot;).addEventListener(&amp;quot;keyup&amp;quot;, function() {
        convML(document.getElementById(&#39;ml&#39;));
     });
  document.getElementById(&amp;quot;frac&amp;quot;).addEventListener(&amp;quot;keyup&amp;quot;, function() {
        convFrac(document.getElementById(&#39;frac&#39;));
     });
  document.getElementById(&amp;quot;ip&amp;quot;).addEventListener(&amp;quot;keyup&amp;quot;, function() {
        convIP(document.getElementById(&#39;ip&#39;));
     });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rest of our code can stay the exact same. Once we use the EventListener format, our other Javascript functions work just fine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OddsConverter Part 1: Converting Plaintext</title>
      <link>https://dylanpotteroconnell.netlify.app/2018/01/22/oddsconverter-part1/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://dylanpotteroconnell.netlify.app/2018/01/22/oddsconverter-part1/</guid>
      <description>&lt;p&gt;The same betting odds are often displayed in disparate ways, depending on the context. In America, normally in terms of a Moneyline, where +200 is shorthand for &amp;ldquo;if you bet \$100, you can win an additional \$200&amp;rdquo;. In other contexts, we generally see the tradition &amp;ldquo;X/Y&amp;rdquo; fractional odds. Both of these have clear mathematical meanings, but for inexperienced bettors, they tend to be poor conveyors of intuitive meaning. We can quickly estimate what &amp;ldquo;+350&amp;rdquo; implies, but for most people, it takes a mental calculation to do so. The most useful intuitive information about betting odds comes from the &amp;ldquo;Implied Probability&amp;rdquo;, which is the probability of the event necessary for you to &amp;ldquo;break even&amp;rdquo; on the bet. Betting sites don&amp;rsquo;t particularly like Implied Probability because it makes the cut they take more obvious (when mutually exclusive and complete events have probabilities that sum up to greater than one), and more intuitively accurate information for bettors can make them realize how daunting it is to actually keep up a positive expected value.&lt;/p&gt;
&lt;p&gt;As someone without the perfect intuition needed to convert these odds in my head, I got tired of glancing at a table of odds and trying to work out their precise value one by one. I thought it would be nice to have a very simple Google Chrome extension that could do it for me. The initial functionality is simple: click on the icon, and it converts any odds it can find on the page into Implied Probability. Click on it again, and it converts back. The challenge is that I have zero knowledge of JavaScript. Luckily, this task was simple enough that it could be cobbled together in the style of Frankenstein&amp;rsquo;s monster, with some slight modifications.&lt;/p&gt;
&lt;h2 id=&#34;click-icon-replace-text&#34;&gt;Click Icon, Replace Text&lt;/h2&gt;
&lt;p&gt;The first feature necessary is simple an extension that runs a script when the icon is clicked. We find a 
&lt;a href=&#34;https://stackoverflow.com/questions/7168362/run-script-each-time-chrome-extension-icon-clicked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow question&lt;/a&gt; (which will be the source of the code for most of the extension) with this very task. Every Chrome Extension begins with a manifest.json file, which gives an overview of the permissions and structure of the extension. I grab their initial suggested manifest.json, and make a number of modifications which will become necessary later. The &amp;ldquo;contextmenus&amp;rdquo; under permissions is only necessary to activate context menus within Chrome, which seems like a useful feature but is not yet crucial to the Extension&amp;rsquo;s functionality. I also made a set of three simple icons in GIMP, so that it looks natural in the browser. The key parts here are the two scripts under &amp;ldquo;background&amp;rdquo;. &amp;ldquo;rightclick.js&amp;rdquo; provides instructions for how to create a context menu upon right click, which we ignore for now (I played with it, but it&amp;rsquo;s still a work in progress). However, &amp;ldquo;background.js&amp;rdquo; is the script that tells our&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
{
  &amp;quot;manifest_version&amp;quot;: 2,

  &amp;quot;name&amp;quot;: &amp;quot;Convert Odds into Implied Probability&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Click this icon to convert moneyline odds into implied probability, and vice versa.&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;background&amp;quot; : {
    &amp;quot;scripts&amp;quot; : [&amp;quot;background.js&amp;quot;, &amp;quot;rightclick.js&amp;quot;]
  },
  &amp;quot;icons&amp;quot;: { &amp;quot;16&amp;quot;: &amp;quot;icon16.png&amp;quot;,
             &amp;quot;48&amp;quot;: &amp;quot;icon48.png&amp;quot;,
             &amp;quot;128&amp;quot;: &amp;quot;icon128.png&amp;quot; },

  &amp;quot;browser_action&amp;quot;: {
    &amp;quot;default_icon&amp;quot;: &amp;quot;icon48.png&amp;quot;,
    &amp;quot;default_title&amp;quot;: &amp;quot;Convert Odds&amp;quot;
  },
  &amp;quot;permissions&amp;quot;: [
    &amp;quot;activeTab&amp;quot;,
    &amp;quot;contextMenus&amp;quot;
  ]
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key parts here are the two scripts under &amp;ldquo;background&amp;rdquo;: &amp;ldquo;rightclick.js&amp;rdquo; provides instructions for how to create a context menu upon right click, which we ignore for now (I played with it, but it&amp;rsquo;s still a work in progress), and &amp;ldquo;background.js&amp;rdquo; is a script that calls our text replace script when the Extension icon is clicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;chrome.browserAction.onClicked.addListener(function(tab) {
   chrome.tabs.executeScript(null, {file: &amp;quot;replaceScript.js&amp;quot;});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ldquo;replaceScript.js&amp;rdquo; is the script that  runs a text replacement that converts anything that &amp;ldquo;looks like&amp;rdquo; odds into implied probabilities (and you can view the final script 
&lt;a href=&#34;https://github.com/dylanpotteroconnell/oddsextension/blob/master/replaceScript.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). Being totally unfamiliar with JavaScript, I grab code from an Extension that performs a 
&lt;a href=&#34;https://9to5google.com/2015/06/14/how-to-make-a-chrome-extensions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simple text replace for each webpage&lt;/a&gt;. The base structure is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var elements = document.getElementsByTagName(&#39;*&#39;);
for (var i = 0; i &amp;lt; elements.length; i++) {
    var element = elements[i];
    for (var j = 0; j &amp;lt; element.childNodes.length; j++) {
        var node = element.childNodes[j];
        if (node.nodeType === 3) {
            var pattern = /abc/gi;
            var text = node.nodeValue;
            var replacedText = text.replace(pattern, &#39;def&#39;);
            if (replacedText !== text) {
                element.replaceChild(document.createTextNode(replacedText), node);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;detect-patterns-calculate-conversions&#34;&gt;Detect Patterns, Calculate Conversions&lt;/h2&gt;
&lt;p&gt;Next, we can use Regular Expressions to only replace certain structures of characters, rather than just one static string. To start, we want to try and identify sequences of exactly a plus or minus sign, followed by at least one digit (e.g. &amp;ldquo;-220&amp;rdquo;). The parentheses &amp;ldquo;capture&amp;rdquo; the characters inside, as we need to not just find these patterns, but extract the numbers. We want to find the end of the digits, but we want to leave the following character in the page&amp;rsquo;s HTML, so we &amp;ldquo;grab&amp;rdquo; the first nondigit character (the [^0-9), but only if it exists (the &amp;ldquo;?&amp;quot;) using &amp;ldquo;([^0-9]?)&amp;quot;, so that we can place that character after our converted expression, &lt;code&gt;var pattern = /([+|-])([0-9]+)([^0-9]?)/gi;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, the challenge is that we want to perform a small calculation using the number provided. That means we need to be able to feed captured characters (preferably, the numbers and the +/- sign) as inputs into a function that determines the output of the replace function of text. I don&amp;rsquo;t know of the optimal way to do this in JavaScript, but with a Google search we find a way to do just that 
&lt;a href=&#34;https://www.bennadel.com/blog/55-using-methods-in-javascript-replace-method.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can replace the previous string used for our pattern with a lambda function. Note that the link provided is inaccurate in its description of the inputs to the lambda function, and this is corrected to the comments. The inputs to the dummy function here are always &amp;ldquo;the full match, $1, $2, $3, &amp;hellip;&amp;rdquo; (where $X refers to the xth capture element), while in the linked tutorial they use &amp;ldquo;$1$&amp;rdquo; in the function input to refer to the full text. We can adapt their function to convert an American moneyline into its implied odds as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
var replacedText = text.replace(pattern,
                                function(fm,$1,$2,$3)
				    {
				      if ($1==&amp;quot;+&amp;quot;)
				      {
					return(&amp;quot;|&amp;quot;+String(Math.round(100.0/(100.0+parseInt($2))*1000)/10.0)+&amp;quot;\%&amp;quot;+&amp;quot;|&amp;quot;+$3)
				      } else
				      {
					return(&amp;quot;|&amp;quot;+String(Math.round(parseInt($2)/(100.0+parseInt($2))*1000)/10.0)
						 +&amp;quot;\%&amp;quot;+&amp;quot;|&amp;quot;+$3)
				      }
				    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s worth breaking this into parts. The inputs to our function are the full text (&amp;lsquo;fm&amp;rsquo;, which we do not use here, but I was not aware of how to suppress this input), and the three strings &amp;lsquo;captured&amp;rsquo; from our regex matching (where $1 refers to the +/- sign, $2 is the number of the line, and $3 is the trailing character). We compute the simple formula to go from a moneyline bet to its implied odds. For a moneyline of +$X, we earn $X+$100 on a win. Thus, the odds (O) needed to break even are $100=0*($X+$100), so O=$100/($X+$100). Similarly, for a moneyline of -$X, we bet $X to win $100, and the implied odds are O=$X/($X+$100). The final return statement is simply cobbled together from some JavaScript documentation. ParseInt turns the &amp;lsquo;$2&amp;rsquo; input into an integer, we then multiply by 1000, and divide by 10 to get the result in the form of a percentage with a single decimal place.&lt;/p&gt;
&lt;p&gt;We repeat this process with two other conversions: 2. Fractional Odds (i.e. &amp;ldquo;3/1&amp;rdquo;) to Implied Probability, and 3. &amp;ldquo;Undoing&amp;rdquo; our first conversion, converting implied probabilities back into moneyline odds. We do not include a separate &amp;ldquo;undo&amp;rdquo; conversion for Fractional Odds, because I wanted to keep this extension very minimal, and detecting the most accurate Fractional Odds to a rounded decimal percentage is a less straightforward conversion.&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&amp;hellip;&lt;/h2&gt;
&lt;p&gt;This results in a simple but effective Chrome Extension that can save quite a bit of time. When on a page with odds in HTML text, you tap the button and can quickly see them replaced by their Implied Probabilities. The major downside is that more complex websites don&amp;rsquo;t always show their odds in such simple HTML text, and learning to detect them for the major bookmakers would be a more substantial challenge. However, most people encounter odds referenced in articles or text discussions, where this Extension works quite cleanly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
